{"version":3,"file":"LosslessNumber.js","names":["extractSignificantDigits","getUnsafeNumberReason","isInteger","isNumber","UnsafeNumberReason","LosslessNumber","isLosslessNumber","constructor","value","Error","valueOf","unsafeReason","undefined","truncate_float","parseFloat","BigInt","toString","toLosslessNumber","length","isNaN","isFinite","String"],"sources":["../../src/LosslessNumber.ts"],"sourcesContent":["import {\n  extractSignificantDigits,\n  getUnsafeNumberReason,\n  isInteger,\n  isNumber,\n  UnsafeNumberReason\n} from './utils.js'\n\n/**\n * A lossless number. Stores its numeric value as string\n */\nexport class LosslessNumber {\n  // numeric value as string\n  value: string\n\n  // type information\n  isLosslessNumber = true\n\n  constructor(value: string) {\n    if (!isNumber(value)) {\n      throw new Error('Invalid number (value: \"' + value + '\")')\n    }\n\n    this.value = value\n  }\n\n  /**\n   * Get the value of the LosslessNumber as number or bigint.\n   *\n   * - a number is returned for safe numbers and decimal values that only lose some insignificant digits\n   * - a bigint is returned for big integer numbers\n   * - an Error is thrown for values that will overflow or underflow\n   *\n   * Note that you can implement your own strategy for conversion by just getting the value as string\n   * via .toString(), and using util functions like isInteger, isSafeNumber, getUnsafeNumberReason,\n   * and toSafeNumberOrThrow to convert it to a numeric value.\n   */\n  valueOf(): number | bigint {\n    const unsafeReason = getUnsafeNumberReason(this.value)\n\n    // safe or truncate_float\n    if (unsafeReason === undefined || unsafeReason === UnsafeNumberReason.truncate_float) {\n      return parseFloat(this.value)\n    }\n\n    // truncate_integer\n    if (isInteger(this.value)) {\n      return BigInt(this.value)\n    }\n\n    // overflow or underflow\n    throw new Error(\n      'Cannot safely convert to number: ' +\n        `the value '${this.value}' would ${unsafeReason} and become ${parseFloat(this.value)}`\n    )\n  }\n\n  /**\n   * Get the value of the LosslessNumber as string.\n   */\n  toString(): string {\n    return this.value\n  }\n\n  // Note: we do NOT implement a .toJSON() method, and you should not implement\n  // or use that, it cannot safely turn the numeric value in the string into\n  // stringified JSON since it has to be parsed into a number first.\n}\n\n/**\n * Test whether a value is a LosslessNumber\n */\nexport function isLosslessNumber(value: unknown): value is LosslessNumber {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  return (value && typeof value === 'object' && value.isLosslessNumber === true) || false\n}\n\n/**\n * Convert a number into a LosslessNumber if this is possible in a safe way\n * If the value has too many digits, or is NaN or Infinity, an error will be thrown\n */\nexport function toLosslessNumber(value: number): LosslessNumber {\n  if (extractSignificantDigits(value + '').length > 15) {\n    throw new Error(\n      'Invalid number: contains more than 15 digits and is most likely truncated and unsafe by itself ' +\n        `(value: ${value})`\n    )\n  }\n\n  if (isNaN(value)) {\n    throw new Error('Invalid number: NaN')\n  }\n\n  if (!isFinite(value)) {\n    throw new Error('Invalid number: ' + value)\n  }\n\n  return new LosslessNumber(String(value))\n}\n"],"mappings":"AAAA,SACEA,wBAAwB,EACxBC,qBAAqB,EACrBC,SAAS,EACTC,QAAQ,EACRC,kBAAkB,QACb,YAAY;;AAEnB;AACA;AACA;AACA,OAAO,MAAMC,cAAc,CAAC;EAC1B;;EAGA;EACAC,gBAAgB,GAAG,IAAI;EAEvBC,WAAWA,CAACC,KAAa,EAAE;IACzB,IAAI,CAACL,QAAQ,CAACK,KAAK,CAAC,EAAE;MACpB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,GAAGD,KAAK,GAAG,IAAI,CAAC;IAC5D;IAEA,IAAI,CAACA,KAAK,GAAGA,KAAK;EACpB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,OAAOA,CAAA,EAAoB;IACzB,MAAMC,YAAY,GAAGV,qBAAqB,CAAC,IAAI,CAACO,KAAK,CAAC;;IAEtD;IACA,IAAIG,YAAY,KAAKC,SAAS,IAAID,YAAY,KAAKP,kBAAkB,CAACS,cAAc,EAAE;MACpF,OAAOC,UAAU,CAAC,IAAI,CAACN,KAAK,CAAC;IAC/B;;IAEA;IACA,IAAIN,SAAS,CAAC,IAAI,CAACM,KAAK,CAAC,EAAE;MACzB,OAAOO,MAAM,CAAC,IAAI,CAACP,KAAK,CAAC;IAC3B;;IAEA;IACA,MAAM,IAAIC,KAAK,CACb,mCAAmC,GAChC,cAAa,IAAI,CAACD,KAAM,WAAUG,YAAa,eAAcG,UAAU,CAAC,IAAI,CAACN,KAAK,CAAE,EACzF,CAAC;EACH;;EAEA;AACF;AACA;EACEQ,QAAQA,CAAA,EAAW;IACjB,OAAO,IAAI,CAACR,KAAK;EACnB;;EAEA;EACA;EACA;AACF;;AAEA;AACA;AACA;AACA,OAAO,SAASF,gBAAgBA,CAACE,KAAc,EAA2B;EACxE;EACA;EACA,OAAQA,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACF,gBAAgB,KAAK,IAAI,IAAK,KAAK;AACzF;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASW,gBAAgBA,CAACT,KAAa,EAAkB;EAC9D,IAAIR,wBAAwB,CAACQ,KAAK,GAAG,EAAE,CAAC,CAACU,MAAM,GAAG,EAAE,EAAE;IACpD,MAAM,IAAIT,KAAK,CACb,iGAAiG,GAC9F,WAAUD,KAAM,GACrB,CAAC;EACH;EAEA,IAAIW,KAAK,CAACX,KAAK,CAAC,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;EACxC;EAEA,IAAI,CAACW,QAAQ,CAACZ,KAAK,CAAC,EAAE;IACpB,MAAM,IAAIC,KAAK,CAAC,kBAAkB,GAAGD,KAAK,CAAC;EAC7C;EAEA,OAAO,IAAIH,cAAc,CAACgB,MAAM,CAACb,KAAK,CAAC,CAAC;AAC1C"}