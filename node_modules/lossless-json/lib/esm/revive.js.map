{"version":3,"file":"revive.js","names":["isLosslessNumber","revive","json","reviver","reviveValue","context","key","value","Array","isArray","call","reviveArray","reviveObject","object","Object","keys","forEach","undefined","array","i","length"],"sources":["../../src/revive.ts"],"sourcesContent":["import { isLosslessNumber } from './LosslessNumber.js'\nimport type { GenericObject, Reviver } from './types'\n\n/**\n * Revive a json object.\n * Applies the reviver function recursively on all values in the JSON object.\n * @param json   A JSON Object, Array, or value\n * @param reviver\n *              A reviver function invoked with arguments `key` and `value`,\n *              which must return a replacement value. The function context\n *              (`this`) is the Object or Array that contains the currently\n *              handled value.\n */\nexport function revive(json: unknown, reviver: Reviver): unknown {\n  return reviveValue({ '': json }, '', json, reviver)\n}\n\n/**\n * Revive a value\n */\nfunction reviveValue(\n  context: GenericObject<unknown> | Array<unknown>,\n  key: string,\n  value: unknown,\n  reviver: Reviver\n): unknown {\n  if (Array.isArray(value)) {\n    return reviver.call(context, key, reviveArray(value, reviver))\n  } else if (value && typeof value === 'object' && !isLosslessNumber(value)) {\n    // note the special case for LosslessNumber,\n    // we don't want to iterate over the internals of a LosslessNumber\n    return reviver.call(context, key, reviveObject(value as GenericObject<unknown>, reviver))\n  } else {\n    return reviver.call(context, key, value)\n  }\n}\n\n/**\n * Revive the properties of an object\n */\nfunction reviveObject(object: GenericObject<unknown>, reviver: Reviver) {\n  Object.keys(object).forEach((key) => {\n    const value = reviveValue(object, key, object[key], reviver)\n    if (value !== undefined) {\n      object[key] = value\n    } else {\n      delete object[key]\n    }\n  })\n\n  return object\n}\n\n/**\n * Revive the properties of an Array\n */\nfunction reviveArray(array: Array<unknown>, reviver: Reviver): Array<unknown> {\n  for (let i = 0; i < array.length; i++) {\n    array[i] = reviveValue(array, i + '', array[i], reviver)\n  }\n\n  return array\n}\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,qBAAqB;AAGtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,MAAMA,CAACC,IAAa,EAAEC,OAAgB,EAAW;EAC/D,OAAOC,WAAW,CAAC;IAAE,EAAE,EAAEF;EAAK,CAAC,EAAE,EAAE,EAAEA,IAAI,EAAEC,OAAO,CAAC;AACrD;;AAEA;AACA;AACA;AACA,SAASC,WAAWA,CAClBC,OAAgD,EAChDC,GAAW,EACXC,KAAc,EACdJ,OAAgB,EACP;EACT,IAAIK,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,EAAE;IACxB,OAAOJ,OAAO,CAACO,IAAI,CAACL,OAAO,EAAEC,GAAG,EAAEK,WAAW,CAACJ,KAAK,EAAEJ,OAAO,CAAC,CAAC;EAChE,CAAC,MAAM,IAAII,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAI,CAACP,gBAAgB,CAACO,KAAK,CAAC,EAAE;IACzE;IACA;IACA,OAAOJ,OAAO,CAACO,IAAI,CAACL,OAAO,EAAEC,GAAG,EAAEM,YAAY,CAACL,KAAK,EAA4BJ,OAAO,CAAC,CAAC;EAC3F,CAAC,MAAM;IACL,OAAOA,OAAO,CAACO,IAAI,CAACL,OAAO,EAAEC,GAAG,EAAEC,KAAK,CAAC;EAC1C;AACF;;AAEA;AACA;AACA;AACA,SAASK,YAAYA,CAACC,MAA8B,EAAEV,OAAgB,EAAE;EACtEW,MAAM,CAACC,IAAI,CAACF,MAAM,CAAC,CAACG,OAAO,CAAEV,GAAG,IAAK;IACnC,MAAMC,KAAK,GAAGH,WAAW,CAACS,MAAM,EAAEP,GAAG,EAAEO,MAAM,CAACP,GAAG,CAAC,EAAEH,OAAO,CAAC;IAC5D,IAAII,KAAK,KAAKU,SAAS,EAAE;MACvBJ,MAAM,CAACP,GAAG,CAAC,GAAGC,KAAK;IACrB,CAAC,MAAM;MACL,OAAOM,MAAM,CAACP,GAAG,CAAC;IACpB;EACF,CAAC,CAAC;EAEF,OAAOO,MAAM;AACf;;AAEA;AACA;AACA;AACA,SAASF,WAAWA,CAACO,KAAqB,EAAEf,OAAgB,EAAkB;EAC5E,KAAK,IAAIgB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;IACrCD,KAAK,CAACC,CAAC,CAAC,GAAGf,WAAW,CAACc,KAAK,EAAEC,CAAC,GAAG,EAAE,EAAED,KAAK,CAACC,CAAC,CAAC,EAAEhB,OAAO,CAAC;EAC1D;EAEA,OAAOe,KAAK;AACd"}